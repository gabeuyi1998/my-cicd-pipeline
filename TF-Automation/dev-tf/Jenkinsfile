pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        TF_BUCKET = 'go-cicd-bucket'
        TF_DYNAMO_TABLE = 'GO-TFstate-table'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Terraform Code') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/gabeuyi1998/my-cicd-pipeline.git',
                    credentialsId: 'github-credentials'
            }
        }
        stage('Terraform Init') {
            steps {
                withAWS(credentials: 'aws-credentials', role: 'arn:aws:iam::866934333672:role/GO_CICD-Pipeline-Role') {
                    sh '''
                    terraform -chdir=TF-Automation/dev-tf init \
                        -backend-config="bucket=$TF_BUCKET" \
                        -backend-config="dynamodb_table=$TF_DYNAMO_TABLE"
                    '''
                }
            }
        }
        stage('Terraform Plan & Apply') {
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', role: 'arn:aws:iam::866934333672:role/GO_CICD-Pipeline-Role') {
                        def planOutput = sh(script: '''
                        terraform -chdir=TF-Automation/dev-tf plan -out=tfplan
                        ''', returnStdout: true).trim()

                        if (planOutput.contains("No changes. Infrastructure is up-to-date.")) {
                            currentBuild.result = 'SUCCESS'
                            echo "No changes detected. Skipping apply."
                            // Exit if no changes
                            sh 'exit 0'
                        } else {
                            echo "Changes detected. Applying the Terraform plan."
                            sh 'terraform -chdir=TF-Automation/dev-tf apply -auto-approve tfplan'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Terraform Pipeline finished.'
        }
        success {
            echo 'Terraform Pipeline succeeded.'
        }
        failure {
            echo 'Terraform Pipeline failed. Please check the logs.'
        }
    }
}